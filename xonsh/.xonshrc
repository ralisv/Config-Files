import sys
import os
import shutil

from math import factorial, pi, e, gcd, log
from git import Repo, InvalidGitRepositoryError
# from wpm.commandline import main as wpm


sys.path.append(os.path.expanduser("~/Config-Files/xonsh"))
from utils import super_util, start_in_new_session, remove
from colors import colorize, LS_COLORS
from trash import ask_whether_to_dump


$PATH.append(os.path.expanduser("~/.local/bin"))
sys.path.append(os.path.expanduser("~/.local/lib/python3.10/site-packages"))

# Silence the deprecation warning caused by bug inside of prompt-toolkit library
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Configure xonsh behavior via environment variables
$AUTO_CD = True
$CASE_SENSITIVE_COMPLETIONS = False
$COMPLETION_IN_THREAD = True
$COMPLETION_MODE = "default"
$COMPLETION_QUERY_LIMIT = 10
$COMPLETIONS_CONFIRM = False
$COMPLETIONS_MENU_ROWS = 2
$DYNAMIC_CWD_WIDTH = "50%"
$DYNAMIC_CWD_ELISION_CHAR = "..."
$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = 1
$INDENT = "   "
$MULTILINE_PROMPT = " "
$SUBSEQUENCE_PATH_COMPLETION = True
$SUGGEST_COMMANDS = True
$SUGGEST_MAX_NUM = 20
$TITLE = "My lovely terminal"
$UPDATE_COMPLETIONS_ON_KEYPRESS = False
$XONSH_AUTOPAIR = True
$XONSH_COLOR_STYLE = "paraiso-dark"
$XONSH_HISTORY_MATCH_ANYWHERE = True

$BAT_STYLE="grid,changes,header-filename,header-filesize,numbers"
def nice_help(args):
    for arg in args:
        f"{arg}" --help | bat --paging=never --language=help --style=grid

my_aliases = {
    "aisa": "ssh 'xralis@aisa.fi.muni.cz'",
    "bat": "bat --theme=DarkNeon",
    "battery-info": "upower -i /org/freedesktop/UPower/devices/battery_BAT0",
    "c": "cd",
    "cat": "bat --pager=never",
    "code": "env -u WAYLAND_DISPLAY code", # because vs-code doesn't work well with wayland, make sure that XWayland or X11 server is running
    "d": "cd",
    "drive": "mountpoint -q ~/Drive || setsid rclone mount Google-Drive:Drive ~/Drive",
    "du": "du -h",
    "fc-list": "fc-list --format='%{family}'\n",
    "grep": "grep --color=auto",
    "help": lambda args: nice_help(args),
    "light": "sudo light -S",
    "ls": "ls --color=auto",
    "maisa": f"sshfs 'xralis@aisa.fi.muni.cz:/home/xralis' {os.path.expanduser('~')}/aisa",
    "okular": lambda args: start_in_new_session(shutil.which("okular"), args),
    "pip": "python -m pip",
    "python": "python3.10",
    "R": "R --no-save -q",
    "rm": lambda args: remove(args),
    "s": lambda args: super_util(args),
    "sl": "sl -e",
    "stackusage": "colour-valgrind --tool=drd --show-stack-usage=yes",
    "trans": "~/Executables/trans -j -d -t czech",
    "uaexpert": lambda args: start_in_new_session(f"{os.path.expanduser('~')}/Executables/UaExpert/AppRun", args),
    "valgrind": "colour-valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --show-reachable=yes --track-fds=yes -s",
    "vlc": lambda args: start_in_new_session(shutil.which("vlc"), args),
    "xaisa": "xxh 'xralis@aisa.fi.muni.cz'",
}
aliases.update(my_aliases)


# Style the terminal

from xonsh.tools import register_custom_style

mystyle = {
    "Literal.String.Single": "#55ff55",
    "Literal.String.Double": "#55ff55",
    "Token.Operator": "#fffd00",
    "Token.PTK.CompletionMenu": "#000000",
    "Token.Literal.Number.Integer": "#44ffff",
}

register_custom_style("mystyle", mystyle, base="paraiso-dark")
$XONSH_COLOR_STYLE="mystyle"

def customize_autocompleter():
    import prompt_toolkit.styles.defaults as defstyle
    defstyle.PROMPT_TOOLKIT_STYLE.append(("bottom-toolbar", "noreverse"))
    defstyle.PROMPT_TOOLKIT_STYLE.append(("completion-menu", "bg:#2244dd #000000"))

customize_autocompleter()

$LS_COLORS = LS_COLORS

# Prompt

BLUE = "{#00b0ff}"
GREEN = "{#00ff00}"
PINK = "{#ff22bb}"
RED = "{#ff9999}"
WHITE = "{#ffffff}"

def enclose_in_brackets(text: str) -> str:
    return f"{PINK}[{text}{PINK}] "

def git_info() -> str:
    try:
        repo = Repo('.', search_parent_directories=True)
    except InvalidGitRepositoryError:
        return ""

    try:
        branch = repo.active_branch.name
    except:
        return enclose_in_brackets(f"{WHITE}unknown")

    color = RED if repo.is_dirty(untracked_files=True) else GREEN

    if branch == "master":
        branch = "main"

    return enclose_in_brackets(f"{color}{branch}")

def path_info() -> str:
    return enclose_in_brackets(f"{colorize(os.getcwd()).replace(os.path.expanduser('~'), '~')}")

def last_exit_code_info() -> str:
    exit_code = $LAST_RETURN_CODE
    return enclose_in_brackets(f"{RED}{exit_code}") if exit_code != 0 else ""

def reset() -> str:
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    return WHITE


$PROMPT_FIELDS["git-info"] = git_info
$PROMPT_FIELDS["last-exit-code-info"] = last_exit_code_info
$PROMPT_FIELDS["path-info"] = path_info
$PROMPT_FIELDS["reset"] = reset

$PROMPT = PINK + "{user}.{path-info}{git-info}{last-exit-code-info}Î» {reset}"


# Colored man pages

$LESS_TERMCAP_mb="\x1b[1;32m"
$LESS_TERMCAP_md="\x1b[38;2;255;180;50m"
$LESS_TERMCAP_me="\x1b[0m"
$LESS_TERMCAP_se="\x1b[0m"
$LESS_TERMCAP_so="\x1b[38;2;255;255;50m"
$LESS_TERMCAP_ue="\x1b[0m"
$LESS_TERMCAP_us="\x1b[38;2;255;100;50m"

$MANPAGER="sh -c 'col -bx | bat -l man --plain'"
$MANROFFOPT="-c" # Option passed to man's formatter, removes undesired characters from output

# Ask about dumping trash

ask_whether_to_dump()
