import sys
import os
import shutil
from pathlib import Path

sys.path.append(str(Path(__file__).resolve().parent))
sys.path.append(str(Path.home() / ".local" / "lib" / "python3.10" / "site-packages"))

from math import factorial, pi, e, gcd, log
from git import Repo, InvalidGitRepositoryError


from utils import super_util, start_in_new_session, remove
from colors import colorize, rainbowize, LS_COLORS, generate_rainbow_colors
from trash import ask_whether_to_dump
from getpass import getuser

# To silence IDE for further complains about nonexistence of this variable
__xonsh__ = __xonsh__


__xonsh__.env["PATH"].append(str(Path.home() / ".local" / "bin"))
__xonsh__.env["PATH"].append(str(Path.home() / ".dotnet" / "tools"))


# Silence the deprecation warning caused by bug inside of prompt-toolkit library
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)

# Configure xonsh behavior via environment variables
__xonsh__.env["AUTO_CD"] = True
__xonsh__.env["CASE_SENSITIVE_COMPLETIONS"] = False
__xonsh__.env["COMPLETION_IN_THREAD"] = True
__xonsh__.env["COMPLETION_MODE"] = "default"
__xonsh__.env["COMPLETION_QUERY_LIMIT"] = 10
__xonsh__.env["COMPLETIONS_CONFIRM"] = False
__xonsh__.env["COMPLETIONS_MENU_ROWS"] = 2
__xonsh__.env["DYNAMIC_CWD_WIDTH"] = "50%"
__xonsh__.env["DYNAMIC_CWD_ELISION_CHAR"] = "..."
__xonsh__.env["FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE"] = 1
__xonsh__.env["INDENT"] = "   "
__xonsh__.env["MULTILINE_PROMPT"] = " "
__xonsh__.env["SUBSEQUENCE_PATH_COMPLETION"] = True
__xonsh__.env["SUGGEST_COMMANDS"] = True
__xonsh__.env["SUGGEST_MAX_NUM"] = 20
__xonsh__.env["TITLE"] = "My lovely terminal"
__xonsh__.env["UPDATE_COMPLETIONS_ON_KEYPRESS"] = True
__xonsh__.env["XONSH_AUTOPAIR"] = True
__xonsh__.env["XONSH_CACHE_DIR"] = "~"
__xonsh__.env["XONSH_COLOR_STYLE"] = "paraiso-dark"
__xonsh__.env["XONSH_HISTORY_MATCH_ANYWHERE"] = True

__xonsh__.env["BAT_STYLE"] = "grid,changes,header-filename,header-filesize,numbers"

my_aliases = {
    "aisa": "ssh 'xralis@aisa.fi.muni.cz'",
    "bat": "bat --theme=DarkNeon",
    "battery-info": "upower -i /org/freedesktop/UPower/devices/battery_BAT0",
    "c": "cd",
    "cat": "bat --pager=never",
    "code": "env -u WAYLAND_DISPLAY code",  # because vs-code doesn't work well with wayland, make sure that XWayland or X11 server is running
    "d": "cd",
    "drive": "mountpoint -q ~/Drive || setsid rclone mount Google-Drive:Drive ~/Drive",
    "du": "du -h",
    "fc-list": "fc-list --format='%{family}'\n",
    "grep": "grep --color=auto",
    "light": "sudo light -S",
    "ls": "ls --color=auto",
    "maisa": f"sshfs 'xralis@aisa.fi.muni.cz:/home/xralis' {os.path.expanduser('~')}/aisa",
    "okular": lambda args: start_in_new_session(shutil.which("okular"), args),
    "pip": "python -m pip",
    "python": "python3.10",
    "R": "R --no-save -q",
    "rm": lambda args: remove(args),
    "s": lambda args: super_util(args),
    "sl": "sl -e",
    "stackusage": "colour-valgrind --tool=drd --show-stack-usage=yes",
    "trans": "~/Executables/trans -j -d -t czech",
    "uaexpert": lambda args: start_in_new_session(
        f"{os.path.expanduser('~')}/Executables/UaExpert/AppRun", args
    ),
    "valgrind": "colour-valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --show-reachable=yes --track-fds=yes -s",
    "vlc": lambda args: start_in_new_session(shutil.which("vlc"), args),
    "xaisa": "xxh 'xralis@aisa.fi.muni.cz'",
}
aliases.update(my_aliases)


# Style the terminal

from xonsh.tools import register_custom_style

mystyle = {
    "Literal.String.Single": "#55ff55",
    "Literal.String.Double": "#55ff55",
    "Token.Operator": "#fffd00",
    "Token.PTK.CompletionMenu": "#000000",
    "Token.Literal.Number.Integer": "#44ffff",
}

register_custom_style("mystyle", mystyle, base="paraiso-dark")
__xonsh__.env["XONSH_COLOR_STYLE"] = "mystyle"


def customize_autocompleter():
    import prompt_toolkit.styles.defaults as defstyle

    defstyle.PROMPT_TOOLKIT_STYLE.append(("bottom-toolbar", "noreverse"))
    defstyle.PROMPT_TOOLKIT_STYLE.append(("completion-menu", "bg:#771977 #000000"))


customize_autocompleter()

__xonsh__.env["LS_COLORS"] = LS_COLORS


# Prompt
class XonshColors:
    BLUE = "{#00b0ff}"
    GREEN = "{#00ff00}"
    PINK = "{#ff22bb}"
    RED = "{#ff9999}"
    WHITE = "{#ffffff}"


def set_rainbow(resolution: int, index: int) -> None:
    """Modify the rainbow coloring"""
    import colors

    colors.RAINBOW_COLORS = generate_rainbow_colors(resolution)
    # Set initial rainbow index to XonshColors.PINK
    colors.RAINBOW_INDEX = index

set_rainbow(1024, 850)


class XonshPrompt:
    @staticmethod
    def enclose_in_brackets(text: str) -> str:
        return f"{rainbowize('[')}{text}{rainbowize(']')}{XonshColors.PINK}"

    @staticmethod
    def git_info() -> str:
        try:
            repo = Repo(".", search_parent_directories=True)
        except InvalidGitRepositoryError:
            return ""

        try:
            branch = repo.active_branch.name
        except:
            return XonshPrompt.enclose_in_brackets(f"{XonshColors.WHITE}unknown")

        color = (
            XonshColors.RED
            if repo.is_dirty(untracked_files=True)
            else XonshColors.GREEN
        )

        if branch == "master":
            branch = "main"

        return XonshPrompt.enclose_in_brackets(f"{color}{branch}")

    @staticmethod
    def path_info() -> str:
        return XonshPrompt.enclose_in_brackets(
            f"{colorize(os.getcwd()).replace(os.path.expanduser('~'), '~')}"
        )

    @staticmethod
    def last_exit_code_info() -> str:
        exit_code = __xonsh__.env["LAST_RETURN_CODE"]
        return (
            XonshPrompt.enclose_in_brackets(f"{XonshColors.RED}{exit_code}")
            if exit_code != 0
            else ""
        )

    @staticmethod
    def reset() -> str:
        warnings.filterwarnings("ignore", category=DeprecationWarning)
        return XonshColors.WHITE


__xonsh__.env["PROMPT_FIELDS"]["git-info"] = XonshPrompt.git_info
__xonsh__.env["PROMPT_FIELDS"]["last-exit-code-info"] = XonshPrompt.last_exit_code_info
__xonsh__.env["PROMPT_FIELDS"]["path-info"] = XonshPrompt.path_info
__xonsh__.env["PROMPT_FIELDS"]["reset"] = XonshPrompt.reset
__xonsh__.env["PROMPT_FIELDS"]["rainbow-user"] = (
    lambda: rainbowize(getuser()) + XonshColors.PINK
)
__xonsh__.env["PROMPT_FIELDS"]["end"] = lambda: rainbowize(" Î» ")
__xonsh__.env["PROMPT_FIELDS"]["separator"] = lambda: rainbowize(".")

__xonsh__.env["PROMPT"] = (
    XonshColors.PINK
    + "{rainbow-user}{separator}{path-info}{git-info}{last-exit-code-info}{end}{reset}"
)


# Colorful manpages if using less as MANPAGER
__xonsh__.env["LESS_TERMCAP_mb"] = "\033[1;32m"
__xonsh__.env["LESS_TERMCAP_md"] = "\033[38;2;255;180;50m"
__xonsh__.env["LESS_TERMCAP_me"] = "\033[0m"
__xonsh__.env["LESS_TERMCAP_se"] = "\033[0m"
__xonsh__.env["LESS_TERMCAP_so"] = "\033[38;2;255;255;50m"
__xonsh__.env["LESS_TERMCAP_ue"] = "\033[0m"
__xonsh__.env["LESS_TERMCAP_us"] = "\033[38;2;255;100;50m"

# Use bat as manpager
__xonsh__.env["MANPAGER"] = "sh -c 'col -bx | bat -l man --plain'"

# Option passed to man's formatter, removes undesiXonshColors.RED characters from output
__xonsh__.env["MANROFFOPT"] = "-c"

# Ask about dumping trash
ask_whether_to_dump()
